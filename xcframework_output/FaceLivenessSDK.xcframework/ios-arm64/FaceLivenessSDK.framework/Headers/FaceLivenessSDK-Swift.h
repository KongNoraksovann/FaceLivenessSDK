#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef FACELIVENESSSDK_SWIFT_H
#define FACELIVENESSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FaceLivenessSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class UIImage;
@class ORTValue;
/// Utility functions for image processing and manipulation
SWIFT_CLASS("_TtC15FaceLivenessSDK11BitmapUtils")
@interface BitmapUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MIN_IMAGE_SIZE;)
+ (NSInteger)MIN_IMAGE_SIZE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_IMAGE_SIZE;)
+ (NSInteger)MAX_IMAGE_SIZE SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)validateImage:(UIImage * _Nullable)image SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)resizeImage:(UIImage * _Nonnull)image width:(NSInteger)width height:(NSInteger)height SWIFT_WARN_UNUSED_RESULT;
+ (float)calculateAverageBrightness:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSNumber *> * _Nullable)normalizeImage:(UIImage * _Nonnull)image width:(NSInteger)width height:(NSInteger)height means:(NSArray<NSNumber *> * _Nonnull)means stds:(NSArray<NSNumber *> * _Nonnull)stds SWIFT_WARN_UNUSED_RESULT;
+ (ORTValue * _Nullable)preprocessImage:(UIImage * _Nonnull)image size:(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
/// Represents the result of a detection operation
SWIFT_CLASS("_TtC15FaceLivenessSDK15DetectionResult")
@interface DetectionResult : NSObject
/// The prediction result label
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Confidence level in the prediction (0.0 to 1.0)
@property (nonatomic, readonly) float confidence;
/// Initialize a new detection result
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label confidence:(float)confidence OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;
/// Base exception class for all SDK exceptions
SWIFT_CLASS("_TtC15FaceLivenessSDK21FaceLivenessException")
@interface FaceLivenessException : NSError
- (nonnull instancetype)init:(NSString * _Nonnull)message :(NSError * _Nullable)cause;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Exception thrown when face detection fails
SWIFT_CLASS("_TtC15FaceLivenessSDK22FaceDetectionException")
@interface FaceDetectionException : FaceLivenessException
- (nonnull instancetype)init:(NSString * _Nonnull)message :(NSError * _Nullable)cause;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the result of the face liveness detection process
SWIFT_CLASS("_TtC15FaceLivenessSDK17FaceLivenessModel")
@interface FaceLivenessModel : NSObject
/// The prediction result: “Live” or “Spoof”
@property (nonatomic, readonly, copy) NSString * _Nonnull prediction;
/// Confidence level in the prediction (0.0 to 1.0)
@property (nonatomic, readonly) float confidence;
/// Reason for failure if authentication failed
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
/// Initialize a new face liveness model
- (nonnull instancetype)initWithPrediction:(NSString * _Nonnull)prediction confidence:(float)confidence failureReason:(NSString * _Nullable)failureReason OBJC_DESIGNATED_INITIALIZER;
/// Check if the liveness check passed successfully
@property (nonatomic, readonly) BOOL isLive;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Config;
/// Main SDK class for face liveness detection
SWIFT_CLASS("_TtC15FaceLivenessSDK15FaceLivenessSDK")
@interface FaceLivenessSDK : NSObject
/// Create a new SDK instance with default configuration
/// @return Configured SDK instance
+ (FaceLivenessSDK * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
/// Create a new SDK instance with custom configuration
/// @param config Custom configuration
/// @return Configured SDK instance
+ (FaceLivenessSDK * _Nonnull)createWithConfig:(Config * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Full liveness detection process with occlusion check and quality check
/// @param image Image to analyze
/// @param completion Callback with the liveness detection result
- (void)detectLivenessWithImage:(UIImage * _Nonnull)image completion:(void (^ _Nonnull)(FaceLivenessModel * _Nullable, NSError * _Nullable))completion;
/// Check SDK version
/// @return Version string
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
/// Cleanup resources when SDK is no longer needed
- (void)close;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Configuration class for SDK initialization
SWIFT_CLASS("_TtCC15FaceLivenessSDK15FaceLivenessSDK6Config")
@interface Config : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Builder class for SDK configuration
SWIFT_CLASS("_TtCCC15FaceLivenessSDK15FaceLivenessSDK6Config7Builder")
@interface Builder : NSObject
/// Enable detailed debug logs
- (Builder * _Nonnull)setDebugLoggingEnabled:(BOOL)enabled SWIFT_WARN_UNUSED_RESULT;
/// Skip image quality checks (not recommended for production)
- (Builder * _Nonnull)setSkipQualityCheck:(BOOL)skip SWIFT_WARN_UNUSED_RESULT;
/// Skip face occlusion checks (not recommended for production)
- (Builder * _Nonnull)setSkipOcclusionCheck:(BOOL)skip SWIFT_WARN_UNUSED_RESULT;
/// Build the configuration
- (Config * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Detects face occlusions such as masks or hands covering the face
SWIFT_CLASS("_TtC15FaceLivenessSDK21FaceOcclusionDetector")
@interface FaceOcclusionDetector : NSObject
/// Initialize the detector
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     Detect if face is occluded by mask or hand
///   </li>
///   <li>
///   </li>
///   <li>
///     @param image Image to analyze
///   </li>
///   <li>
///     @return DetectionResult containing class name and confidence
///   </li>
///   <li>
///     @throws OcclusionDetectionException if detection fails
///   </li>
/// </ul>
- (DetectionResult * _Nullable)detectFaceMaskWithImage:(UIImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Try to reload model if it failed to load initially
/// @return true if model loaded successfully
- (BOOL)reloadModel SWIFT_WARN_UNUSED_RESULT;
/// Close and release resources
- (void)close;
@end

@class ImageQualityResult;
/// Checks the quality of an image for face authentication
SWIFT_CLASS("_TtC15FaceLivenessSDK19ImageQualityChecker")
@interface ImageQualityChecker : NSObject
/// Check image quality metrics and face presence
/// @param image The image to analyze
/// @return ImageQualityResult containing quality metrics
/// @throws QualityCheckException if quality check fails
- (ImageQualityResult * _Nullable)checkImageQualityWithImage:(UIImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (void)close;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the result of image quality check
SWIFT_CLASS("_TtC15FaceLivenessSDK18ImageQualityResult")
@interface ImageQualityResult : NSObject
@property (nonatomic) float brightnessScore;
@property (nonatomic) float sharpnessScore;
@property (nonatomic) float faceScore;
@property (nonatomic) BOOL hasFace;
@property (nonatomic) float overallScore;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float BRIGHTNESS_WEIGHT;)
+ (float)BRIGHTNESS_WEIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float SHARPNESS_WEIGHT;)
+ (float)SHARPNESS_WEIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float FACE_WEIGHT;)
+ (float)FACE_WEIGHT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) float ACCEPTABLE_SCORE_THRESHOLD;)
+ (float)ACCEPTABLE_SCORE_THRESHOLD SWIFT_WARN_UNUSED_RESULT;
/// Create a default instance for cases where quality check is skipped
+ (ImageQualityResult * _Nonnull)createDefault SWIFT_WARN_UNUSED_RESULT;
/// Calculates the overall score based on weighted components
- (void)calculateOverallScore;
/// Determines if the image quality is acceptable for further processing
- (BOOL)isAcceptable SWIFT_WARN_UNUSED_RESULT;
/// Get detailed breakdown of all component scores
- (NSDictionary<NSString *, id> * _Nonnull)getDetailedReport SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Exception thrown when the input image is invalid
SWIFT_CLASS("_TtC15FaceLivenessSDK21InvalidImageException")
@interface InvalidImageException : FaceLivenessException
- (nonnull instancetype)init:(NSString * _Nonnull)message;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Handles face liveness detection using ONNX runtime
SWIFT_CLASS("_TtC15FaceLivenessSDK16LivenessDetector")
@interface LivenessDetector : NSObject
/// Initialize the detector
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Run face liveness detection on the provided image
/// @param image The image to analyze (should be a cropped face)
/// @return Dictionary containing “label” (String) and “confidence” (Float) keys, or nil if detection fails
- (NSDictionary<NSString *, id> * _Nullable)runInferenceWithImage:(UIImage * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
/// Try to reload model if it failed to load initially
/// @return true if model loaded successfully
- (BOOL)reloadModel SWIFT_WARN_UNUSED_RESULT;
/// Close and release resources
- (void)close;
@end

/// Exception thrown when liveness detection fails
SWIFT_CLASS("_TtC15FaceLivenessSDK17LivenessException")
@interface LivenessException : FaceLivenessException
- (nonnull instancetype)init:(NSString * _Nonnull)message :(NSError * _Nullable)cause;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Utility class for consistent logging throughout the SDK
SWIFT_CLASS("_TtC15FaceLivenessSDK8LogUtils")
@interface LogUtils : NSObject
/// Enable or disable debug logging
/// @param enabled True to enable debug logs, false to disable
+ (void)setDebugEnabled:(BOOL)enabled;
/// Log a debug message
/// @param tag Component tag
/// @param message Log message
+ (void)d:(NSString * _Nonnull)tag :(NSString * _Nonnull)message;
/// Log an info message
/// @param tag Component tag
/// @param message Log message
+ (void)i:(NSString * _Nonnull)tag :(NSString * _Nonnull)message;
/// Log a warning message
/// @param tag Component tag
/// @param message Log message
+ (void)w:(NSString * _Nonnull)tag :(NSString * _Nonnull)message;
/// Log an error message
/// @param tag Component tag
/// @param message Log message
+ (void)e:(NSString * _Nonnull)tag :(NSString * _Nonnull)message;
/// Log an error message with exception
/// @param tag Component tag
/// @param message Log message
/// @param error Exception
+ (void)e:(NSString * _Nonnull)tag :(NSString * _Nonnull)message :(NSError * _Nonnull)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Exception thrown when there are issues loading ML models
SWIFT_CLASS("_TtC15FaceLivenessSDK21ModelLoadingException")
@interface ModelLoadingException : FaceLivenessException
- (nonnull instancetype)init:(NSString * _Nonnull)message :(NSError * _Nullable)cause;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class ORTSession;
/// Utility functions for ML model handling
SWIFT_CLASS("_TtC15FaceLivenessSDK10ModelUtils")
@interface ModelUtils : NSObject
/// Load model from the bundle resources
/// @param modelName Name of the model file in bundle
/// @return URL pointing to the model file
/// @throws ModelLoadingException if model loading fails
+ (NSURL * _Nullable)loadModelFromBundle:(NSString * _Nonnull)modelName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Creates an ONNX Runtime session for the given model
/// @param modelName Name of the ONNX model file (without extension)
/// @return OrtSession initialized with the model
/// @throws ModelLoadingException if session creation fails
+ (ORTSession * _Nullable)createONNXSession:(NSString * _Nonnull)modelName error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Copies the ONNX model files from the bundle to a writable location
/// This is useful for first launch or if models need to be updated
/// @return Bool indicating success
+ (BOOL)copyModelsFromBundleIfNeeded SWIFT_WARN_UNUSED_RESULT;
/// Get the input node name for an ONNX model
/// @param session The ONNX session
/// @return The name of the input node
+ (NSString * _Nullable)getInputName:(ORTSession * _Nonnull)session error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get the output node name for an ONNX model
/// @param session The ONNX session
/// @return The name of the output node
+ (NSString * _Nullable)getOutputName:(ORTSession * _Nonnull)session error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Exception thrown when occlusion detection fails
SWIFT_CLASS("_TtC15FaceLivenessSDK27OcclusionDetectionException")
@interface OcclusionDetectionException : FaceLivenessException
- (nonnull instancetype)init:(NSString * _Nonnull)message :(NSError * _Nullable)cause;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Exception thrown when quality check fails
SWIFT_CLASS("_TtC15FaceLivenessSDK21QualityCheckException")
@interface QualityCheckException : FaceLivenessException
- (nonnull instancetype)init:(NSString * _Nonnull)message :(NSError * _Nullable)cause;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
